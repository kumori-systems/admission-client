/// <reference types="request" />
/// <reference types="node" />
/// <reference types="bluebird" />
/**
 * ECloud Admission
 * The Admission API is the entry point for ECloud users to interact with the system. With this API you can perform operations such as registering components, services, deploying them, checking their status, etc.  In order to correctly understand the terms used in descriptions of API elements, it is necessary to have some knowledge about the structure of the services within the ECloud PAAS. Information on this topic can be found in the ECloud manual.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import request = require('request');
import http = require('http');
import Promise = require('bluebird');
export declare class Deployment {
    'service': string;
    'roles': {
        [key: string]: InlineResponse2001Roles;
    };
}
export declare class DeploymentRole {
    'instances': {
        [key: string]: InlineResponse2001Instances;
    };
}
export declare class GeneralResponse {
    'success': boolean;
    'message': string;
    'data': any;
}
export declare class InlineResponse200 {
    'success': boolean;
    'message': string;
    'data': InlineResponse200Data;
}
export declare class InlineResponse2001 {
    'success': boolean;
    'message': string;
    'data': {
        [key: string]: InlineResponse2001Data;
    };
}
export declare class InlineResponse2001Arrangement {
    'cpu': number;
    'bandwidth': number;
    'failurezones': number;
    'mininstances': number;
    'maxinstances': number;
}
export declare class InlineResponse2001Data {
    'service': string;
    'roles': {
        [key: string]: InlineResponse2001Roles;
    };
}
export declare class InlineResponse2001Instances {
    'id': string;
    'privateIp': string;
    'publicIp': string;
    'arrangement': InlineResponse2001Arrangement;
}
export declare class InlineResponse2001Roles {
    'instances': {
        [key: string]: InlineResponse2001Instances;
    };
}
export declare class InlineResponse2002 {
    'success': boolean;
    'message': string;
    'data': any;
}
export declare class InlineResponse200Data {
    'successful': any;
    'errors': any;
    'deployments': any;
    'links': any;
    'tests': any;
    'testToken': string;
}
export declare class InstanceInfo {
    'id': string;
    'privateIp': string;
    'publicIp': string;
    'arrangement': InlineResponse2001Arrangement;
}
export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: request.Options): void;
}
export declare class HttpBasicAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(requestOptions: request.Options): void;
}
export declare class ApiKeyAuth implements Authentication {
    private location;
    private paramName;
    apiKey: string;
    constructor(location: string, paramName: string);
    applyToRequest(requestOptions: request.Options): void;
}
export declare class OAuth implements Authentication {
    accessToken: string;
    applyToRequest(requestOptions: request.Options): void;
}
export declare class VoidAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(_: request.Options): void;
}
export declare enum DefaultApiApiKeys {
}
export declare class DefaultApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'apiAuthorization': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: DefaultApiApiKeys, value: string): void;
    accessToken: string;
    /**
     *
     * Registers a set of bundles in the system. At least one of the parameters must have a proper value.
     * @param bundlesZip A zip with a set of bundles, each one of them in a different folder. The structure of a bundle is documented in ECloud SDK manual, section 4.1.
     * @param bundlesJson A Json file with a list of references to bundles. The format of this file must follow the specification in the ECloud SDK manual, section 4.1.1.
     */
    bundlesPost(bundlesZip?: Buffer, bundlesJson?: Buffer): Promise<{
        response: http.ClientResponse;
        body: InlineResponse200;
    }>;
    /**
     *
     * Undeploys a deployment in the system.
     * @param urn Urn of deployment to be undeployed
     */
    deploymentsDelete(urn: string): Promise<{
        response: http.ClientResponse;
        body: InlineResponse2002;
    }>;
    /**
     *
     * Performs a new deployment in the system.
     * @param inline The uploaded deployment file following specification in ECloud Manual, section 4.
     */
    deploymentsPost(inline: Buffer): Promise<{
        response: http.ClientResponse;
        body: InlineResponse2001;
    }>;
    /**
     *
     * Returns data of deployed services in system.
     * @param urn urn of deployment whose data is needed. If not provided, data about any accesible deployment is returned.
     * @param owner Only the deployments whose owner matches the value of the parameter are listed
     * @param show Desired format of the information provided for each deployment. Possible values are&amp;#58; * topology. It is the default value. * extended. * urn. Only urns are listed.
     */
    findDeployments(urn?: string, owner?: string, show?: string): Promise<{
        response: http.ClientResponse;
        body: InlineResponse2001;
    }>;
    /**
     *
     * Removes a link between two services
     * @param linkManifest The manifest of the link to be removed.
     */
    linksDelete(linkManifest: Buffer): Promise<{
        response: http.ClientResponse;
        body: InlineResponse2002;
    }>;
    /**
     *
     * Creates a new link between two deployed services.
     * @param linkManifest The manifest of the desired link.
     */
    linksPost(linkManifest: Buffer): Promise<{
        response: http.ClientResponse;
        body: InlineResponse2002;
    }>;
    /**
     *
     * Modification of some parameter of the deployment.      There are two possible actions&amp;#58; * Reconfiguration of parameters or deployment and * Manual scaling.
     * @param inline The uploaded deployment file with the new configuration. The file must be a JSON with this keys&amp;#58; * deploymentURN. URN of the deployment to be reconfigured. * action. manualScaling/reconfig * entryPoints (only when reconfig action) * configuration (only when reconfig action) * roles (only when manualScaling action)
     */
    modifyDeployment(inline: Buffer): Promise<{
        response: http.ClientResponse;
        body: InlineResponse2002;
    }>;
    /**
     *
     * Returns data of registered entities in the system. These can be component, services, runtimes and resources.
     * @param urn urn of deployment whose data is needed. If not provided, data about any accesible deployment is returned.
     */
    registriesGet(urn?: string): Promise<{
        response: http.ClientResponse;
        body: InlineResponse2002;
    }>;
    /**
     *
     * Remove a registered entity based on its urn.
     * @param urn The urn of registered entity to be deleted.
     */
    registriesUrnDelete(urn: string): Promise<{
        response: http.ClientResponse;
        body: InlineResponse2002;
    }>;
    /**
     *
     * Returns manifest of a registered entity based on its urn.
     * @param urn The urn of registered entity to get its manifest .
     */
    registriesUrnGet(urn: string): Promise<{
        response: http.ClientResponse;
        body: InlineResponse2002;
    }>;
    /**
     *
     * Modifies the number of instances of some role of a deployment
     * @param inline
     */
    scaleInstances(inline: Buffer): Promise<{
        response: http.ClientResponse;
        body: InlineResponse2002;
    }>;
    /**
     *
     * Removes a test context
     * @param urn Identifier of the test context to be removed.
     */
    testContextsDelete(urn: string): Promise<{
        response: http.ClientResponse;
        body: InlineResponse2002;
    }>;
    /**
     *
     * List current test contexts in the stamp.
     */
    testContextsGet(): Promise<{
        response: http.ClientResponse;
        body: InlineResponse2002;
    }>;
}
